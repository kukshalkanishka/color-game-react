{"version":3,"sources":["CurrentColor.js","ColorContainer.js","ColorsContainer.js","ScoreDisplay.js","App.js","serviceWorker.js","index.js"],"names":["CurrentColor","react_default","a","createElement","style","color","this","props","distractiveColor","className","currentColor","Component","ColorContainer","concat","onClick","updateScore","ColorsContainer","_this","colors","map","src_ColorContainer","bind","ScoreDisplay","score","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","looseValue","winValue","state","currentColors","shuffle","getRandomVaue","Math","floor","random","length","selectedColor","_this2","setState","operand","isCurrentColor","src_CurrentColor","src_ScoreDisplay","src_ColorsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAgBeA,mLAXX,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,MAAOC,KAAKC,MAAMC,kBAC3BC,UAAU,gBAETH,KAAKC,MAAMG,qBAPOC,aCYZC,mLATX,OACEX,EAAAC,EAAAC,cAAA,OACEM,UAAS,GAAAI,OAAKP,KAAKC,MAAMF,MAAhB,cACTS,QAASR,KAAKC,MAAMQ,qBALCJ,aCYdK,mLAXJ,IAAAC,EAAAX,KACHY,EAASZ,KAAKC,MAAMW,OAAOC,IAAI,SAAAd,GAAK,OACtCJ,EAAAC,EAAAC,cAACiB,EAAD,CACEf,MAAOA,EACPU,YAAaE,EAAKV,MAAMQ,YAAYM,KAAK,KAAMhB,OAGnD,OAAOJ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBAAoBS,UARhBP,aCKfW,mLAJX,OAAOrB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBAAgBH,KAAKC,MAAMgB,cAF1BZ,aC2DZa,cArDb,SAAAA,EAAYjB,GAAO,IAAAU,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACjBP,EAAAQ,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAMC,KACDuB,YAAc,EACnBb,EAAKc,SAAW,GAChBd,EAAKC,OAAS,CAAC,QAAS,MAAO,OAAQ,UACvCD,EAAKe,MAAQ,CACXC,cAAeC,kBAAQjB,EAAKC,QAC5BK,MAAO,EACPb,aAAcO,EAAKC,OAAOD,EAAKkB,iBAC/B3B,iBAAkBS,EAAKC,OAAOD,EAAKkB,kBATpBlB,+EAcjB,OAAOmB,KAAKC,MAAMD,KAAKE,SAAWhC,KAAKY,OAAOqB,+CAGjCC,GACb,OAAOlC,KAAK0B,MAAMtB,cAAgB8B,sCAGxBA,GAAe,IAAAC,EAAAnC,KACzBA,KAAKoC,SAAS,SAAAV,GACZ,IAAIW,EAAUF,EAAKX,WAInB,OAHIW,EAAKG,eAAeJ,KACtBG,EAAUF,EAAKV,UAEV,CACLR,MAAOS,EAAMT,MAAQoB,EACrBzB,OAAQgB,kBAAQO,EAAKT,MAAMC,eAC3BvB,aAAc+B,EAAKvB,OAAOuB,EAAKN,iBAC/B3B,iBAAkBiC,EAAKvB,OAAOuB,EAAKN,qDAMvC,OACElC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACbR,EAAAC,EAAAC,cAAC0C,EAAD,CACEnC,aAAcJ,KAAK0B,MAAMtB,aACzBF,iBAAkBF,KAAK0B,MAAMxB,mBAE/BP,EAAAC,EAAAC,cAAC2C,EAAD,CAAcvB,MAAOjB,KAAK0B,MAAMT,QAChCtB,EAAAC,EAAAC,cAAC4C,EAAD,CACE7B,OAAQZ,KAAK0B,MAAMC,cACnBlB,YAAaT,KAAKS,YAAYM,KAAKf,gBA/C3BK,aCIEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93c26c28.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass CurrentColor extends Component {\n  render() {\n    return (\n      <div\n        style={{ color: this.props.distractiveColor }}\n        className=\"font-display\"\n      >\n        {this.props.currentColor}\n      </div>\n    );\n  }\n}\n\nexport default CurrentColor;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nclass ColorContainer extends Component {\n  render() {\n    return (\n      <div\n        className={`${this.props.color} color-div`}\n        onClick={this.props.updateScore}\n      />\n    );\n  }\n}\n\nexport default ColorContainer;\n","import React, { Component } from \"react\";\nimport ColorContainer from \"./ColorContainer\";\nimport \"./App.css\";\n\nclass ColorsContainer extends Component {\n  render() {\n    let colors = this.props.colors.map(color => (\n      <ColorContainer\n        color={color}\n        updateScore={this.props.updateScore.bind(null, color)}\n      />\n    ));\n    return <div className=\"colors-container\">{colors}</div>;\n  }\n}\n\nexport default ColorsContainer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass ScoreDisplay extends Component {\n  render() {\n    return <div className=\"font-display\">{this.props.score}</div>;\n  }\n}\n\nexport default ScoreDisplay;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { shuffle } from \"lodash\";\n\nimport CurrentColor from \"./CurrentColor\";\nimport ColorsContainer from \"./ColorsContainer\";\nimport ScoreDisplay from \"./ScoreDisplay\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.looseValue = -5;\n    this.winValue = 10;\n    this.colors = [\"green\", \"red\", \"blue\", \"yellow\"];\n    this.state = {\n      currentColors: shuffle(this.colors),\n      score: 0,\n      currentColor: this.colors[this.getRandomVaue()],\n      distractiveColor: this.colors[this.getRandomVaue()]\n    };\n  }\n\n  getRandomVaue() {\n    return Math.floor(Math.random() * this.colors.length);\n  }\n\n  isCurrentColor(selectedColor) {\n    return this.state.currentColor == selectedColor;\n  }\n\n  updateScore(selectedColor) {\n    this.setState(state => {\n      let operand = this.looseValue;\n      if (this.isCurrentColor(selectedColor)) {\n        operand = this.winValue;\n      }\n      return {\n        score: state.score + operand,\n        colors: shuffle(this.state.currentColors),\n        currentColor: this.colors[this.getRandomVaue()],\n        distractiveColor: this.colors[this.getRandomVaue()]\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <CurrentColor\n          currentColor={this.state.currentColor}\n          distractiveColor={this.state.distractiveColor}\n        />\n        <ScoreDisplay score={this.state.score} />\n        <ColorsContainer\n          colors={this.state.currentColors}\n          updateScore={this.updateScore.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}